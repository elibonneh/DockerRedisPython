GitHub URL:
https://github.com/bak036/DockerRedisPython

Confug.xml (attached file too):
<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.29">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.3.2"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.3.2">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers>
        <hudson.triggers.SCMTrigger>
          <spec>H/30 * * * *</spec>
          <ignorePostCommitHooks>false</ignorePostCommitHooks>
        </hudson.triggers.SCMTrigger>
      </triggers>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
    <com.coravy.hudson.plugins.github.GithubProjectProperty plugin="github@1.29.3">
      <projectUrl>https://github.com/bak036/DockerRedisPython.git/</projectUrl>
      <displayName>DevOpsFinalProject</displayName>
    </com.coravy.hudson.plugins.github.GithubProjectProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.60">
    <script>pipeline {
    agent {label &apos;master slave_1&apos;}
    
    stages {
        
        stage(&apos;Checkout From Git&apos;) {
            steps {
                git &apos;https://github.com/bak036/DockerRedisPython.git&apos;
            }
        }
        stage(&apos;Run Docker&apos;) {
            steps {
                echo &quot;Docker Run...&quot;
                sh &apos;docker-compose rm -f -s -v&apos;
                sh &apos;docker-compose up -d&apos;
            }
        }
        stage(&apos;Run Selenium Test&apos;) {
            steps {
                echo &quot;Run selenium_sanity_test&quot;
                sh &apos;python SeleniumSanityTest.py&apos;
            }
        }
    }
    post {
        always {
            emailext body: &apos;A Test EMail&apos;, recipientProviders: [[$class: &apos;DevelopersRecipientProvider&apos;], [$class: &apos;RequesterRecipientProvider&apos;]], subject: &apos;Test&apos;
        }
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>


Console Output
Started by user unknown or anonymous
Running in Durability level: MAX_SURVIVABILITY
[Pipeline] node
Running on master slave_1 in C:\Users\yulia\Downloads\192.168.56.1\workspace\DevOpsFinalProject
[Pipeline] {
[Pipeline] stage
[Pipeline] { (Checkout From Git)
[Pipeline] git
Fetching changes from the remote Git repository
 > git.exe rev-parse --is-inside-work-tree # timeout=10
 > git.exe config remote.origin.url https://github.com/bak036/DockerRedisPython.git # timeout=10
Fetching upstream changes from https://github.com/bak036/DockerRedisPython.git
 > git.exe --version # timeout=10
 > git.exe fetch --tags --progress https://github.com/bak036/DockerRedisPython.git +refs/heads/*:refs/remotes/origin/*
Checking out Revision 4cf3a743881267a41509c7c574c32d270a8d982a (refs/remotes/origin/master)
 > git.exe rev-parse "refs/remotes/origin/master^{commit}" # timeout=10
 > git.exe rev-parse "refs/remotes/origin/origin/master^{commit}" # timeout=10
 > git.exe config core.sparsecheckout # timeout=10
 > git.exe checkout -f 4cf3a743881267a41509c7c574c32d270a8d982a
 > git.exe branch -a -v --no-abbrev # timeout=10
 > git.exe branch -D master # timeout=10
 > git.exe checkout -b master 4cf3a743881267a41509c7c574c32d270a8d982a
Commit message: "Added a new Selenium Test webpage"
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Run Docker)
[Pipeline] echo
Docker Run...
[Pipeline] sh
+ docker-compose rm -f -s -v
 > git.exe rev-list --no-walk 4cf3a743881267a41509c7c574c32d270a8d982a # timeout=10
Stopping devopsfinalproject_web_1   ... 

Stopping devopsfinalproject_redis_1 ... 

 [1A [2K
Stopping devopsfinalproject_redis_1 ...  [32mdone [0m
 [1B [2A [2K
Stopping devopsfinalproject_web_1   ...  [32mdone [0m
 [2BRemoving devopsfinalproject_web_1   ... 

Removing devopsfinalproject_redis_1 ... 

 [2A [2K
Removing devopsfinalproject_web_1   ...  [32mdone [0m
 [2B [1A [2K
Removing devopsfinalproject_redis_1 ...  [32mdone [0m
 [1BGoing to remove devopsfinalproject_web_1, devopsfinalproject_redis_1
[Pipeline] sh
+ docker-compose up -d
The Docker Engine you're using is running in swarm mode.

Compose does not use swarm mode to deploy services to multiple nodes in a swarm. All containers will be scheduled on the current node.

To deploy your application across the swarm, use `docker stack deploy`.

Creating devopsfinalproject_web_1 ... 

Creating devopsfinalproject_redis_1 ... 

 [2A [2K
Creating devopsfinalproject_web_1   ...  [32mdone [0m
 [2B [1A [2K
Creating devopsfinalproject_redis_1 ...  [32mdone [0m
 [1B[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Run Selenium Test)
[Pipeline] echo
Run selenium_sanity_test
[Pipeline] sh
+ python SeleniumSanityTest.py
Test passed Succesfuly
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Declarative: Post Actions)
[Pipeline] emailext
An attempt to send an e-mail to empty list of recipients, ignored.
[Pipeline] }
[Pipeline] // stage
[Pipeline] }
[Pipeline] // node
[Pipeline] End of Pipeline
Finished: SUCCESS